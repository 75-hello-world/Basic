 There is 100+ page manual that gives detailed information about each of these commands. The number at the end of each line is the manual page number for the command. 
 Press Menu->About to find this manual.
 Press an alpha key to scroll to commands that start with that letter. (Does not work on all devices.)
 Tap a command's line. The command will be loaded into the clip board. It can then be pasted into the Editor.
*
! - Single Line Comment, 40
!! - Block Comment, 40
#, 20
# - Format Line, 20
% - Middle of Line Comment, 40
ABS(<nexp>), 43
ACOS(<nexp>), 45
Array.average <Average_nvar>, Array[], 30
Array.copy SourceArray[{<start>{,<length>}], DestinationArray[{{-}<extras>}, 30
Array.delete Array[], 31
Array.length <Length_nvar>, Array[], 31
Array.load Array[], <nexp>{,<nexp>..,<nexp>}, 31
Array.max <Max_nvar> Array[], 31
Array.min <Min_nvar>, Array[], 31
Array.reverse  Array[] | Array$[], 32
Array.shuffle  Array[] | Array$[], 32
Array.sort  Array[] | Array$[, 32
Array.std_dev <sd_nvar>, Array[], 32
Array.sum <Sum_nvar>, Array[], 32
Array.variance <v_nvar>, Array[], 31
ASCII(<sexp>), 46
ASIN(<nexp>), 45
ATAN(<nexp>), 45
ATAN2 (<nexp_x>, <nexp_y>), 45
audio.isdone <Boolean_nvar>, 114
audio.length <length_nvar>, <aft_nexp>, 114
audio.load  <aft_nvar>, <filename_sexp>, 113
audio.loop, 114
audio.play <aft_nexp>, 113
audio.position.current  <nvar>, 114
audio.position.seek <nexp>, 114
audio.record.start <fn_svar>, 115
audio.record.stop, 115
audio.release <aft_nexp>, 114
audio.stop, 113
audio.volume <left_nexp>, <right_nexp>, 114
Back.resume, 57
Background(), 47
Background.Resume, 91
BAND(<nexp1>, <nexp2>), 43
BIN$(<nexp>), 49
BIN(<sexp>), 46
BOR(<nexp1>, <nexp2>), 43
Browse <url_sexp>, 82
Bt.close, 80
Bt.connect {0|1}, 80
Bt.device.name <svar>, 81
Bt.onReadReady.Resume, 81
Bt.open {0|1}, 79
Bt.read.bytes <svar>, 81
Bt.read.ready <navar>, 81
Bt.set.uuid <sexp>, 81
Bt.status <nvar>, 80
Bt.write <parms same a print>, 80
Bundle.clear <pointer_nexp>, 38
Bundle.contain  <pointer_nexp>, <key_sexp> , <contains_nvar>, 37
Bundle.create <pointer_nvar>, 36
Bundle.get <pointer_nexp>, <key_sexp>, <nvar>|<svar>, 37
Bundle.keys <pointer_nexp>, <list_nvar>, 37
Bundle.put <pointer_nexp>, <key_sexp>, <value_nexp>|<value_sexp>, 37
Bundle.type <pointer_nexp>, <key_sexp>, <type_svar>, 38
BXOR(<nexp1>, <nexp2>), 43
Byte.close <File_table_nvar>, 70
Byte.copy  <File_table_nvar>,<output_file_svar>, 71
Byte.open {r|w|a}, <File_table_nvar>, <Path_sexp>, 69
Byte.position.get  <File_table_nvar>, <position_nexp>, 71
Byte.position.set  <File_table_nvar>, <position_nexp>, 71
Byte.read.buffer  <File_table_nvar>, <count_nexp>, <buffer_svar>, 70
Byte.read.byte <File_table_nvar>, <byte_nvar>, 70
Byte.write.buffer <File_table_nvar>, <sexp>, 71
Byte.write.byte <File_table_nvar>, <byte_nexp>|<sexp>, 70
Call <user_defined_function>, 52
CBRT(<nexp>), 43
CEIL(<nexp>), 44
CHR$ (<nexp>), 47
Clipboard.get <svar>, 82
Clipboard.put <sexp>, 82
Clock(), 46
CLS, 62
Console.save <filename_sexp>, 63
COS(<nexp>), 44
COSH(<nexp>), 45
D_u.break, 54
Debug.dump.array Array[], 59
Debug.dump.bundle  <bundlePtr_nexp>, 60
Debug.dump.list  <listPtr_nexp>, 60
Debug.dump.scalars, 59
Debug.dump.stack  <stackPtr_nexp>, 60
Debug.echo.off, 59
Debug.echo.on, 59
Debug.off, 59
Debug.on, 59
Debug.print, 59
Debug.show, 62
Debug.show.array Array[], 60
Debug.show.bundle  <bundlePtr_nexp>, 60
Debug.show.list  <listPtr_nexp>, 61
Debug.show.program, 61
Debug.show.scalars, 60
Debug.show.stack  <stackPtr_nexp>, 61
Debug.show.watch, 61
Debug.watch var, var, …, var, 61
Decrypt  <pw_sexp>, <encrypted_svar>, <decrypted_svar>, 83
Device <svar>, 85
Dim Array[<nexp>. . . ,<nexp>], 30
Do - Until<lexp>, 53
Echo.off, 82
Echo.on, 82
Email.send <recipient_sxep>, <subject_sexp>, <body_sexp>, 90
Encrypt <pw_sexp>, <source_sexp>, <encrypted_svar>, 82
End, 58
Ends_with ( <Look_for_sexp>, <look_in_sexp>), 47
Exit, 58
EXP(<nexp>), 44
F_n.break, 53
File.Delete <Boolean_nvar>, <Path_sexp>, 66
File.Dir <Path_sexp>, Array[], 66
File.Exists <Boolean_nvar>, <Path_sexp>, 66
File.Mkdir <Path_sexp>, 66
File.Rename <Old_Path_sexp>, <New_Path_sexp>, 66
File.root <svar>, 67
File.Size <size_nvar>, <Path_sexp>, 67
FLOOR(<nexp>), 44
Fn.def  name|name$( {nvar}|{svar}|Array[]|Array$[], ….. {nvar}|{svar}|Array[]|Array$[]), 50
Fn.end, 51
Fn.rtn <sexp>|<nexp>, 51
For - To - Step - Next, 52
FORMAT$(<Pattern_sexp>,  <nexp>  ), 49
ftp.cd <new_directory_sexp>, 78
Ftp.Close, 77
ftp.delete <filename_sexp>, 78
ftp.dir <list_navar>, 78
ftp.get <source_sexp>, <destination_sexp>, 78
ftp.mkdir <directory_sexp>, 78
ftp.open <url_sexp>, <port_nexp>, <user_sexp>, <pw_sexp>, 77
ftp.put <source_sexp>, <destination_sexp>, 77
ftp.rename <old_filename_sexp>, <new_filename_sexp>, 78
ftp.rmdir <directory_sexp>, 78
getError$(), 47
GoSub<label>, Return, 54
GoTo <label>, 54
gps.accuracy <nvar>, 117
gps.altitude <nvar>, 118
gps.bearing <nvar>, 118
gps.close, 117
gps.latitude <nvar>, 117
gps.longitude <nvar>, 117
gps.open, 117
gps.provider <svar>, 117
gps.speed <nvar>, 118
gps.time <nvar>, 118
gr.arc  Object_number, left, top, right, bottom, start_angle, sweep_angle, fill_mode, 100
Gr.bitmap.create bitmap_ptr, width, height, 104
gr.bitmap.crop <new_bitmap_object_nvar>, <source_bitmap_object_nexp>, <x_nexp>, <y_nexp>, <width_nexp>, <height_nexp>, 105
gr.bitmap.delete bitmap_ptr, 105
gr.bitmap.draw Object_ptr, bitmap_ptr, x , w, 106
gr.bitmap.drawinto.end, 106
gr.bitmap.drawinto.start Bitmap_Pointer, 106
gr.bitmap.load bitmap_ptr, File_name$, 104
gr.bitmap.save Object_ptr, “filename”{, <quality_nexp>}, 106
gr.bitmap.scale dest_ptr, src_ptr, Width, Height {, Smoothing}, 105
gr.bitmap.size bitmap_ptr, Width, Height, 105
gr.bounded.touch touched, left, top, right, bottom, 102
gr.bounded.touch2 touched, left, top, right, bottom, 102
gr.brightness <nexp>, 99
gr.camera.autoShoot bm_ptr {,flash_ mode}, 108
Gr.camera.manualShoot  bm_ptr {,flash_ mode}, 109
gr.camera.shoot  bm_ptr, 108
gr.circle Object_number, x, y, radius, 100
gr.clip <object_nvar>,  <left_nexp>,<top_nexp>,  <right_nexp>,  <bottom_nexp>{,<RO_nexp>}, 111
gr.close, 98
gr.cls, 98
gr.color alpha, red, green, blue, style, 96
gr.front  flag, 98
gr.get.bmpixel bitmap_ptr, x, y, alpha, red, green, blue, 106
gr.get.pixel x, y, alpha, red, green, blue, 109
gr.get.position Object_number,  x, y, 109
gr.get.textbounds <sexp>, left, top, right, bottom, 103
Gr.get.value Object_number, tag$, value, 109
Gr.get.value Text_Object_number, “text”, theText$, 109
gr.hide Object_number, 101
gr.line Object_number, x1, y1, x2, y2, 99
gr.modify Object_number, parameter_name$, {value|value$}, 109
gr.NewDL Array[], 112
gr.onTouch.Resume, 103
gr.open alpha, red, green, blue {, ShowStatusBar {, Orientation}}, 96
gr.orientation 0|1, 97
gr.oval Object_number, left, top, right, bottom, 99
gr.paint.get <object_nvar>, 110
Gr.poly Object_number, List_pointer {,x,y}, 100
gr.rect Object_number, left, top, right, bottom, 99
gr.render, 97
gr.rotate.end {<obj_nvar>}, 107
gr.rotate.start angle, x, y{,<obj_nvar>}, 107
gr.save “filename” {,<quality_nexp>}, 106, 109
gr.scale x_factor, y_factor, 98
Gr.screen width, height{, density }, 97
gr.screen.to_bitmap bm_ptr, 109
gr.set.AntiAlias <nexp>, 97
gr.set.pixels Object_number, Pixels[] {,x,y}, 100
gr.set.stroke <nexp>, 97
gr.show Object_number, 101
Gr.StatusBar.Show <nexp>, 97
gr.text.align type, 103
gr.text.bold Boolean, 104
gr.text.draw Object_number, x, y, text$, 104
gr.text.size n, 103
gr.text.skew n, 104
gr.text.strike Boolean, 104
gr.text.typeface type, 103
gr.text.underline Boolean, 104
gr.text.width <nvar>, <sexp>, 103
gr.touch touched, x, y, 101
gr.touch2 touched, x, y, 102
gr_collision ( <object_1_nvar>, <object_2_navr>), 47, 111
GrabFile <result_svar>,<path_sexp>, 69
GrabURL <result_svar>,<url_sexp>, 69
Graburl ip$, “http://automation.whatismyip.com/n09230945.asp”, 76
Headset <state_nvar>, <type_svar>, <mic_nvar>, 90
HEX$(<nexp>), 49
HEX(<sexp>), 45
Home, 91
Html.clear.cache, 74
HTML.clear.history, 74
Html.close, 74
Html.get.datalink <data_svar>, 73
Html.go.back, 74
Html.go.forward, 74
html.load.string <html_sexp>, 72
Html.load.url <file_sexp>, 72
Html.open {<Show_status_bar_nexp>}, 72
html.post url$, list, 72
http.post url$, list, result$, 89
HYPOT(<nexp_x>, <nexp_y), 44
If  - Else -Elseif- Endif, 52
Include FileNamePath, 85
Inkey$ <svar>, 64
Input <Prompt_sexp>, <nvar>|<svar>, {<Default_sexp>|<Default_nexp>}, 63
Is_In(<Search_for_sexp>, <Search_in_sexp>{,<start_nexp>}, 46
Kb.hide, 65
Kb.toggle, 64
Key.Resume, 58
LEFT$ (<sexp>, <nexp>), 48
LEN(<sexp>), 45
List.add <pointer_nexp>, <nexp>{,<nexp>..,<nexp>}, 34
List.add.array  <destination_list_pointer_nexp>,Array$[]|Array[], 34
List.add.list <destination_list_pointer_nexp>, <source_list_pointer_nexp>, 34
List.clear <pointer_nexp>, 36
List.create  <N|S>, <pointer_nvar>, 34
List.create  N|S, <pointer_nvar>, 34
List.get <pointer_nexp>,<index_nexp>, <svar>|<nvar>, 35
List.insert <pointer_nexp>,<index_nexp>, <sexp>|<nexp>, 35
List.remove <pointer_nexp>,<index_nexp>, 35
List.replace <pointer_nexp>,<index_nexp>, <sexp>|<nexp>, 35
List.search <pointer_nexp>, value|value$, <result_nvar>{,<start_nexp>}, 36
List.size <pointer_nexp>, <nvar>, 35
List.ToArray <pointer_nexp>, Array$[] | Array[], 36
List.type <pointer_nexp>, <svar>, 35
LOG(<nexp>), 44
LOG10(<nexp>), 44
LOWER$(<sexp>), 48
MenuKey.Resume, 57
MID$(<sexp>, <start_nexp>, <Count_nexp>}), 48
MOD(<nexp1>, <nexp2>), 44
myPhoneNumber <svar>, 89
Notify <Title_sexp>,< Subtitle_sexp>,<alert_sexp>,<wait_nexp>, 90
OCT$(<nexp>, 49
OCT(<sexp>), 45
OnBackGround:, 91
OnBackKey:, 57
OnBTReadReady:, 81
OnError:, 56
OnKeyPress:, 58
OnMenuKey:, 57
onTimer:, 85
onTouch:, 102
Pause <ticks_nexp>, 86
Phone.call <sexpr>, 89
Phone.rcv.init, 89
Phone.rcv.next  <state_nvar>, <number_svar>, 89
Popup <message_sexp>, <x_nexp>, <Y_nexp>, <duration_nexp>, 86
POW(<nexp1>, <nexp2>), 44
Print <sexp>|<nexp> {,|;} . . . . <sexp>|<nexp>{,|;}, 62
RANDOMIZE(<nexp>), 43
Read.data <number>|<string> {,<number>|<string>…,<number>|<string>}, 58
Read.from <nexp>, 59
Read.next  <svar>|<nvar>{,<svar>|<nvar>… , <svar>|<nvar>}, 58
REPLACE$( <target_sexp>, <argument_sexp>, <replace_sexp>), 48
RIGHT$(<sexp>, <nexp>), 48
RND(), 44
ROUND(<nexp>), 44
Run <filename_sexp> {, <data_sexp>}, 55
Select <selection_nvar>, < Array$[]>|<list_nexp>, <message_sexp> {,<press_nvar>}, 86
sensors.close, 119
sensors.list list$[], 118
sensors.open t1 {t2,...,tn}, 119
sensors.read sensor_type, p1, p2, p3, 119
SHIFT (<value_nexp>, <bits_nexp>), 46
SIN(<nexp>), 44
SINH(<nexp>), 45
sms.rcv.init, 90
sms.rcv.next <svar>, 90
Sms.send <number_sexp>, <message_sexp>, 89
Socket.client.connect <server_ip_sexp>, <port_nexp>, 75
Socket.client.read.file  <fw_nexp>, 75
Socket.client.read.line <line_svar>, 75
Socket.client.read.ready <nvar>, 75
Socket.client.write.bytes <sexp>, 75
Socket.client.write.file  <fr_nexp>, 76
Socket.client.write.line <line_sexp>, 75
Socket.myip  <svar>, 76
Socket.server.client.ip <nvar>, 77
Socket.server.close, 77
Socket.server.connect, 76
Socket.server.create <port_nexp>, 76
Socket.server.disconnect, 77
Socket.server.read.line <svar>, 76
Socket.server.read.ready <nvar>, 76
Socket.server.write.bytes <sexp>, 77
Socket.server.write.file  <fr_nexp>, 77
Socket.server.write.line <sexp>, 76
Soundpool.load <soundID_nvar>, <file_path_sexp>, 115
Soundpool.open <MaxStreams_nexp>, 115
Soundpool.pause <streamID_nexp>, 117
Soundpool.play streamID(nvar), soundID, right_volume, left_volume, priority, loop, rate, 116
Soundpool.release, 117
Soundpool.resume <streamID_nexp>, 117
Soundpool.setpriority <streamID_nexp>, <priority_nexp>, 116
Soundpool.setrate <streamID_nexp>, <rate_nexp>, 116
Soundpool.setvolume <streamID_nexp>, <leftVolume_nexp>, <rightVolume_nexp>, 116
Soundpool.stop <streamID_nexp>, 117
Soundpool.unload <soundID_nexp>, 116
Split <result_Array$[]>, <source_sexp>, <test_sexp>, 87
sql.close DB_Pointer, 92
sql.delete DB_Pointer, Table_Name$, Where$, 94
sql.drop_table DB_Pointer, Table_Name$, 92
sql.exec DB_Pointer, Command$, 94
sql.insert DB_Pointer, Table_Name$, C1$, V1$, C2$, V2$,...,CN$, VN$, 93
sql.new_table DB_Pointer, DB_Name$, Table_Name$, C1$, C2$..,CN$, 92
sql.next Done, Cursor, C1V$, C2V$, .., CNV$, 93
sql.open DB_Pointer, DB_Name$, 92
sql.query Cursor, DB_Pointer, Table_Name$,  Columns$, Where$, Order$, 93
sql.raw_query Cursor, DB_Pointer, Query$, 94
sql.update DB_Pointer, Table_Name$, C1$, V1$, C2$, V2$,...,CN$, VN$: Where$, 94
SQR(<nexp>), 43
Stack.clear <ptr_nexep>, 39
Stack.create N|S, <ptr_nvar>, 38
Stack.IsEmpty <ptr_nexep>, <nvar>, 39
Stack.peek <ptr_nexep>, <nvar>|<svar>, 39
Stack.pop <ptr_nexep>, <nvar>|<svar>, 39
Stack.push <ptr_nexep>, <nexp>|<sexp>, 38
Stack.type <ptr_nexep>, <svar>, 39
Starts_with (<Search_for_sexp>, <Search_in_sexp>{,<start_nexp>}, 46
STR$(<sexp>), 48
STT <string_list_ptr_nvar>, 83
STT.LISTEN, 83
Su.close, 120
Su.open, 119
Su.read.line <svar>, 120
Su.read.ready <nvar>, 120
Su.write <sexp>, 119
Sw.begin <nexp>|<sexp>, 56
Sw.break, 56
Sw.case <numeric_constant>|<string_constant>, 56
Sw.default, 56
Sw.end, 56
Swap <nvar_a>|<svar_a>, <nvar_b>, <svar_b>, 82
TAN(<nexp>), 44
Text.close <File_table_nvar>, 67
Text.input <savr>{, <sexp>}, 64
Text.open {r|w|a}, <File_table_nvar>, <Path_sexp>, 67
Text.position.get  <File_table_nvar>, <position_nvar>, 68
Text.position.set <File_table_nvar>, <position_nexp>, 69
Text.readln <File_table_nvar>, <Line_svar>, 68
Text.writeln <File_table_nexp>, <parms same as print>, 68
TGet <result_svar>, <prompt_sexp>, 64
Time Year$, Month$, Day$, Hour$, Minute$, Second$, 87
Timer.Clear, 85
Timer.Resume, 85
Timer.set <interval_nexp>, 85
TODEGREES(<nexp>), 45
Tone <frequency_nexp>, <duration_nexp>, 87
TORADIANS(<nexp>), 45
Tts.init, 83
Tts.speak <sexp>, 83
UCODE(<sexp>), 46
UnDim Array[], 30
UPPER$(<sexp>), 49
VAL( <sexp> ), 45
VERSION$(), 49
Vibrate <Pattern_Array[]>,<nexp>, 87
W_r.break, 53
WakeLock <code_nexp>, 88
While <lexp> - Repeat, 53